'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _interpret = require('interpret');

var _interpret2 = _interopRequireDefault(_interpret);

var _rechoir = require('rechoir');

var _rechoir2 = _interopRequireDefault(_rechoir);

var _findUp = require('find-up');

var _findUp2 = _interopRequireDefault(_findUp);

var _path = require('path');

var _requireReload = require('require-reload');

var _requireReload2 = _interopRequireDefault(_requireReload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reload = (0, _requireReload2.default)(require);
var extensions = _interpret2.default.extensions;


var requireResolve = function requireResolve(path) {
	try {
		return require.resolve(path);
	} catch (err) {
		return false;
	}
};

var resolveFile = function resolveFile(filepath) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	var resolved = requireResolve(filepath);
	if (resolved) {
		return resolved;
	}

	var _options$cwd = options.cwd,
	    cwd = _options$cwd === undefined ? process.cwd() : _options$cwd,
	    _options$useLoader = options.useLoader,
	    useLoader = _options$useLoader === undefined ? true : _options$useLoader,
	    _options$useFindUp = options.useFindUp,
	    useFindUp = _options$useFindUp === undefined ? true : _options$useFindUp,
	    _options$resolvers = options.resolvers,
	    resolvers = _options$resolvers === undefined ? [] : _options$resolvers,
	    _options$exts = options.exts,
	    exts = _options$exts === undefined ? [] : _options$exts;


	var paths = [];

	if (useLoader) {
		(function () {
			var sortedExts = Object.keys(extensions).filter(function (ext) {
				return !exts.length || exts.indexOf(ext) > -1;
			}).sort(function (a, b) {
				return a === '.js' ? -1 : b === '.js' ? 1 : a.length - b.length;
			});

			var hasDot = filepath.includes('.');
			var includesExt = function includesExt() {
				return sortedExts.reverse().some(function (ext) {
					return filepath.endsWith(ext);
				});
			};

			if (hasDot && includesExt()) {
				paths.push(filepath);
			} else {
				paths.push(filepath);
				sortedExts.forEach(function (ext) {
					paths.push(filepath + ext);
				});
			}
		})();
	} else {
		paths.push(filepath);
	}

	var resolverDirs = resolvers.concat('.');
	var fullPaths = [];

	resolverDirs.forEach(function (dir) {
		paths.forEach(function (path) {
			fullPaths.push((0, _path.resolve)(cwd, dir, path));
		});
	});

	var finalPath = fullPaths.find(requireResolve);

	if (!finalPath && useFindUp) {
		finalPath = _findUp2.default.sync(paths, { cwd: cwd });
	}

	if (!finalPath) {
		var error = new Error('File "' + filepath + '" NOT found.');
		error.errno = 'ENOENT';
		throw error;
	}

	return finalPath;
};

var importFile = function importFile(filepath) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var _options$useLoader2 = options.useLoader,
	    useLoader = _options$useLoader2 === undefined ? true : _options$useLoader2,
	    _options$useCache = options.useCache,
	    useCache = _options$useCache === undefined ? true : _options$useCache,
	    _options$useESDefault = options.useESDefault,
	    useESDefault = _options$useESDefault === undefined ? true : _options$useESDefault;

	var finalPath = resolveFile(filepath, options);
	try {
		useLoader && _rechoir2.default.prepare(extensions, finalPath);
	} catch (err) {/* noop */}
	var module = useCache ? require(finalPath) : reload(finalPath);
	var shouldUseDefault = useESDefault && module.__esModule && module.default;
	return shouldUseDefault ? module.default : module;
};

importFile.resolve = resolveFile;

exports.default = importFile;